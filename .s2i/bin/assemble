#!/bin/bash

# Prevent running assemble in builders different than official STI image.
# The official nodejs:8-onbuild already run npm install and use different
# application folder.
[ -d "/usr/src/app" ] && exit 0


function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all package elements from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -av $LOCAL_SOURCE_DIR/$1/* $DEPLOY_DIR 2> /dev/null
  fi
}

function remove_elements() {
    if [ -d $LOCAL_SOURCE_DIR/package ]; then
        echo "Removing uncompressed elements"
        rm -rf $LOCAL_SOURCE_DIR/package
    fi

    echo "Removing tarball"
    rm -f $LOCAL_SOURCE_DIR/*.tgz

    echo "Removing .s2i"
    rm -rf $LOCAL_SOURCE_DIR/.s2i
}


shopt -s dotglob

echo "---> ************** (PRE ASSEMBLE) "

date

LOCAL_SOURCE_DIR=/tmp/src
DEPLOY_DIR=${HOME}

echo "Pre assemble parameters"
echo "LOCAL_SOURCE_DIR: $LOCAL_SOURCE_DIR"
echo "DEPLOY_DIR: $DEPLOY_DIR"
echo "ANGULAR_PACKAGE_NAME: ${ANGULAR_PACKAGE_NAME}"
echo "ANGULAR_PACKAGE_TARBALL: ${ANGULAR_PACKAGE_TARBALL}"
echo "ARTIFACTORY_NPM_REPO: ${ARTIFACTORY_NPM_REPO}"
echo "NGINX_VERSION: ${NGINX_VERSION}"
echo "ARTIFACTORY_REPOSITORY_TYPE: ${ARTIFACTORY_REPOSITORY_TYPE}"
echo "ARTIFACTORY_GENERIC_REPO: ${ARTIFACTORY_GENERIC_REPO}"
echo "ARTIFACTORY_TOKEN: ${ARTIFACTORY_TOKEN}"

if [ -z "${ANGULAR_PACKAGE_NAME}" ]; then
    echo "Aborting due to ANGULAR_PACKAGE_NAME environment variable is not setted"
    exit 1
fi

if [ -z "${ANGULAR_PACKAGE_TARBALL}" ]; then
    echo "Aborting due to ANGULAR_PACKAGE_TARBALL environment variable is not setted"
    exit 1
fi

if [ -z "${ARTIFACTORY_REPOSITORY_TYPE}" ]; then
    echo "Aborting due to ARTIFACTORY_REPOSITORY_TYPE environment variable is not setted"
    exit 1
fi

if [ "$ARTIFACTORY_REPOSITORY_TYPE" != "NPM" ] && [ "$ARTIFACTORY_REPOSITORY_TYPE" != "Generic" ]; then
    echo "Aborting due to ARTIFACTORY_REPOSITORY_TYPE environment variable has an incorrect value"
    exit 1
fi

if [ -z "${ARTIFACTORY_TOKEN}" ]; then
    echo "Aborting due to ARTIFACTORY_TOKEN environment variable is not setted"
    exit 1
fi


if [ "$ARTIFACTORY_REPOSITORY_TYPE" = "NPM" ]; then
    echo "ARTIFACTORY_REPOSITORY_TYPE has the value 'NPM'"

    if [ -z "${ARTIFACTORY_NPM_REPO}" ]; then
      echo "Aborting due to ARTIFACTORY_NPM_REPO environment variable is not setted"
      exit 1
    fi

    cd "$LOCAL_SOURCE_DIR"

    echo "Retrieving artifact from Artifactory Angular NPM repository"
    curl -o $LOCAL_SOURCE_DIR/${ANGULAR_PACKAGE_TARBALL} -H "X-JFrog-Art-Api:${ARTIFACTORY_TOKEN}" -O ${ARTIFACTORY_NPM_REPO}${ANGULAR_PACKAGE_NAME}/${ANGULAR_PACKAGE_TARBALL}

fi

if [ "$ARTIFACTORY_REPOSITORY_TYPE" = "Generic" ]; then
    echo "ARTIFACTORY_REPOSITORY_TYPE has the value 'Generic'"

    if [ -z "${ARTIFACTORY_GENERIC_REPO}" ]; then
      echo "Aborting due to ARTIFACTORY_GENERIC_REPO environment variable is not setted"
      exit 1
    fi

    cd "$LOCAL_SOURCE_DIR"

    echo "Retrieving artifact from Artifactory Angular Generic repository"
    curl -o $LOCAL_SOURCE_DIR/${ANGULAR_PACKAGE_TARBALL} -H "X-JFrog-Art-Api:${ARTIFACTORY_TOKEN}" -O ${ARTIFACTORY_GENERIC_REPO}${ANGULAR_PACKAGE_NAME}/${ANGULAR_PACKAGE_TARBALL}

fi

echo "---> tar artifact"
tar -xvzf ${ANGULAR_PACKAGE_TARBALL}

ERR=$?

if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from tar"
    exit $ERR
fi

if [ -d "$LOCAL_SOURCE_DIR/package/dist" ]; then
    #Copying module elements
    copy_artifacts "package/dist"
else
    echo "Aborting due to error code 1 from copying module elements"
    exit 1
fi

#Removing elements
remove_elements

echo "ls -al ($LOCAL_SOURCE_DIR)"
ls -al


#Change to $HOME
cd $HOME

echo "ls -al ($HOME)"
ls -al













if [ -z "${NODEJS_IS_SCOPED_PACKAGE}" ]; then
    echo "Aborting due to NODEJS_IS_SCOPED_PACKAGE environment variable is not setted"
    exit 1
fi


export NPM_AUTH=${ARTIFACTORY_NPM_AUTH}
export NPM_AUTH_EMAIL=${ARTIFACTORY_NPM_EMAIL_AUTH}

if [ -z "${ARTIFACTORY_NPM_REPO}" ]; then
    echo "ARTIFACTORY_NPM_REPO variable is not setted "
else
    echo "---> Setting Artifactory NPM Registry location"
    npm config set registry  ${ARTIFACTORY_NPM_REPO}

    if [ -z "${ARTIFACTORY_NPM_AUTH}" ]; then
        echo "Aborting due to NPM_AUTH environment variable is not setted"
        exit 1
    fi

    if [ -z "${ARTIFACTORY_NPM_EMAIL_AUTH}" ]; then
        echo "Aborting due to ARTIFACTORY_NPM_EMAIL_AUTH environment variable is not setted"
        exit 1
    fi
fi

echo "---> NPM Registry location"
npm config get registry

cd "$LOCAL_SOURCE_DIR"


echo "---> NPM view tarball"
npm view ${NODEJS_PACKAGE_TAG} dist.tarball

echo "---> NPM get tarball"
npm pack ${NODEJS_PACKAGE_TAG}

echo "---> tar artifact"
tar -xvzf ${NODEJS_PACKAGE_TARBALL}

ERR=$?

if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from tar"
    exit $ERR
fi

if [ -d "$LOCAL_SOURCE_DIR/package" ]; then
    #Copying module elements
    copy_artifacts "package"
else
    echo "Aborting due to error code 1 from copying module elements"
    exit 1
fi

#Removing elements
remove_elements

echo "ls -al ($LOCAL_SOURCE_DIR)"
ls -al


#Change to $HOME
cd $HOME

echo "ls -al ($HOME)"
ls -al


echo "Executing original assembling"
/usr/libexec/s2i/assemble
